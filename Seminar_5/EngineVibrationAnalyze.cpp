#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <iomanip>
#include <cmath>
using namespace std;
int EngineVibrationAnalyze() {
    setlocale(LC_ALL, "ru");
    
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞–º–ø–ª–∏—Ç—É–¥ –≤–∏–±—Ä–∞—Ü–∏–∏
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 2.5); // –ê–º–ø–ª–∏—Ç—É–¥—ã –æ—Ç 0 –¥–æ 2.5
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –∞–º–ø–ª–∏—Ç—É–¥ –≤–∏–±—Ä–∞—Ü–∏–∏ (50 –∑–Ω–∞—á–µ–Ω–∏–π)
    std::vector<double> vibration_amplitudes(50);
    std::generate(vibration_amplitudes.begin(), vibration_amplitudes.end(), [&]() { return dis(gen); });
    
    // –í—ã–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    std::cout << "–í–ò–ë–†–ê–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –î–í–ò–ì–ê–¢–ï–õ–Ø" << std::endl;
    std::cout << "=============================" << std::endl;
    std::cout << "–ò—Å—Ö–æ–¥–Ω—ã–µ –∞–º–ø–ª–∏—Ç—É–¥—ã –≤–∏–±—Ä–∞—Ü–∏–∏ (50 –∏–∑–º–µ—Ä–µ–Ω–∏–π):" << std::endl;
    for (size_t i = 0; i < vibration_amplitudes.size(); ++i) {
        std::cout << std::fixed << std::setprecision(3) << std::setw(6) << vibration_amplitudes[i];
        if (vibration_amplitudes[i] < 0.1) std::cout << " ‚ö† –®–£–ú";
        if ((i + 1) % 5 == 0) std::cout << std::endl;
        else std::cout << " | ";
    }
    std::cout << std::endl;
    
    // 1. –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏—è < 0.1)
    int initial_count = vibration_amplitudes.size();
    vibration_amplitudes.erase(
        std::remove_if(vibration_amplitudes.begin(), vibration_amplitudes.end(),
            [](double amplitude) { return amplitude < 0.1; }),
        vibration_amplitudes.end()
    );
    int removed_noise = initial_count - vibration_amplitudes.size();
    
    std::cout << "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–æ–≤ (< 0.1):" << std::endl;
    std::cout << "–£–¥–∞–ª–µ–Ω–æ —à—É–º–æ–≤: " << removed_noise << " –∏–∑–º–µ—Ä–µ–Ω–∏–π" << std::endl;
    std::cout << "–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏–π: " << vibration_amplitudes.size() << std::endl;
    
    if (!vibration_amplitudes.empty()) {
        std::cout << "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–ª–∏—Ç—É–¥—ã:" << std::endl;
        for (size_t i = 0; i < vibration_amplitudes.size(); ++i) {
            std::cout << std::setw(6) << vibration_amplitudes[i];
            if ((i + 1) % 8 == 0) std::cout << std::endl;
            else std::cout << " | ";
        }
        std::cout << std::endl << std::endl;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (vibration_amplitudes.empty()) {
        std::cout << "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —à—É–º–æ–≤!" << std::endl;
        return 0;
    }

    // 2. –ù–∞–π–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã
    double average_amplitude = std::accumulate(vibration_amplitudes.begin(), vibration_amplitudes.end(), 0.0) / vibration_amplitudes.size();
    auto max_amplitude_it = std::max_element(vibration_amplitudes.begin(), vibration_amplitudes.end());

    std::cout << "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ú–ü–õ–ò–¢–£–î:" << std::endl;
    std::cout << "–°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞: " << std::setprecision(4) << average_amplitude << std::endl;
    std::cout << "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: " << std::setprecision(4) << *max_amplitude_it << std::endl;

    // 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥ 0.5
    bool all_above_threshold = std::all_of(vibration_amplitudes.begin(), vibration_amplitudes.end(),
        [](double amplitude) { return amplitude > 0.5; });

    std::cout << "–ê–ù–ê–õ–ò–ó –ü–û–†–û–ì–ê 0.5:" << std::endl;
    std::cout << "–í—Å–µ –∞–º–ø–ª–∏—Ç—É–¥—ã > 0.5: " << (all_above_threshold ? "–î–ê" : "–ù–ï–¢") << std::endl;

    if (!all_above_threshold) {
        int below_threshold = std::count_if(vibration_amplitudes.begin(), vibration_amplitudes.end(),
            [](double amplitude) { return amplitude <= 0.5; });

        std::cout << "–ê–º–ø–ª–∏—Ç—É–¥ ‚â§ 0.5: " << below_threshold << " –∏–∑–º–µ—Ä–µ–Ω–∏–π" << std::endl;

        // –ù–∞–π–¥–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
        if (below_threshold > 0) {
            std::cout << "–ó–Ω–∞—á–µ–Ω–∏—è ‚â§ 0.5: ";
            std::vector<double> low_amplitudes;
            std::copy_if(vibration_amplitudes.begin(), vibration_amplitudes.end(),
                        std::back_inserter(low_amplitudes),
                        [](double amp) { return amp <= 0.5; });

            for (size_t i = 0; i < low_amplitudes.size(); ++i) {
                std::cout << low_amplitudes[i];
                if (i < low_amplitudes.size() - 1) std::cout << ", ";
            }
            std::cout << std::endl;
        }
    }
    std::cout << std::endl;
    // 4. –í—ã–≤–µ–¥–∏—Ç–µ 10 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –∞–º–ø–ª–∏—Ç—É–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    std::vector<double> sorted_amplitudes = vibration_amplitudes;
    std::sort(sorted_amplitudes.begin(), sorted_amplitudes.end(), std::greater<double>());

    int top_count = std::min(10, static_cast<int>(sorted_amplitudes.size()));

    std::cout << "–¢–û–ü-" << top_count << " –ù–ê–ò–ë–û–õ–¨–®–ò–• –ê–ú–ü–õ–ò–¢–£–î:" << std::endl;
    std::cout << "‚Ññ  | –ê–º–ø–ª–∏—Ç—É–¥–∞ | –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ" << std::endl;
    std::cout << "---|-----------|-----------------------" << std::endl;

    for (int i = 0; i < top_count; ++i) {
        double deviation = ((sorted_amplitudes[i] - average_amplitude) / average_amplitude) * 100;
        std::cout << std::setw(2) << (i + 1) << " | "
                  << std::setw(8) << std::setprecision(4) << sorted_amplitudes[i] << " | "
                  << std::setw(6) << std::setprecision(1) << deviation << "%";

        // –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (sorted_amplitudes[i] > 2.0) std::cout << " üö® –û–ü–ê–°–ù–û";
        else if (sorted_amplitudes[i] > 1.5) std::cout << " ‚ö† –í–ù–ò–ú–ê–ù–ò–ï";
        else if (sorted_amplitudes[i] > 1.0) std::cout << " ‚Ñπ –ù–û–†–ú–ê";

        std::cout << std::endl;
    }


    return 0;
}